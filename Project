using CSV
using DataFrames
using Statistics

# --- Step 1: Load CSV dataset ---
function load_data(file_path::String)
    data = CSV.read(file_path, DataFrame)

    return data
end

# --- Step 2: Get user input with validation ---
function get_user_input()
    annual_income = -1.0
    while annual_income <= 0
        println("Enter annual income (positive number, e.g., 60000):")
        try
            annual_income = parse(Float64, readline())
            if annual_income <= 0
                println("❌ Invalid input. Must be greater than 0.")
            end
        catch
            println("❌ Invalid input. Please enter a number.")
        end
    end

    loan_amount = -1.0
    while loan_amount <= 0
        println("Enter loan dollar amount (positive number, e.g., 12000):")
        try
            loan_amount = parse(Float64, readline())
            if loan_amount <= 0
                println("❌ Invalid input. Must be greater than 0.")
            end
        catch
            println("❌ Invalid input. Please enter a number.")
        end
    end

    monthly_term = 0
    while !(monthly_term in (36, 60))
        println("Enter monthly term (choose 36 or 60 months):")
        try
            monthly_term = parse(Int, readline())
            if !(monthly_term in (36, 60))
                println("❌ Invalid choice. Must be 36 or 60.")
            end
        catch
            println("❌ Invalid input. Please enter 36 or 60.")
        end
    end

    valid_purposes = ["car", "educational", "house"]
    purpose = ""
    while !(lowercase(purpose) in valid_purposes)
        println("Enter purpose (choose from: car, educational, house):")
        purpose = readline()
        if !(lowercase(purpose) in valid_purposes)
            println("❌ Invalid choice. Please enter car, educational, or house.")
        end
    end

    return (annual_income, loan_amount, monthly_term, lowercase(purpose))
end

# --- Step 3: Compute Monthly DTI ---
function compute_dti(annual_income, loan_amount, monthly_term)
    monthly_income = annual_income / 12
    monthly_payment = loan_amount / monthly_term
    return monthly_payment / monthly_income
end

# --- Step 4: Grade Loan ---
function grade_loan(dti::Float64; thresholds=(0.1, 0.2, 0.35))
    a, b, c = thresholds
    if dti <= a
        return "A"
    elseif dti <= b
        return "B"
    elseif dti <= c
        return "C"
    else
        return "D"
    end
end

# --- Step 5: Make Recommendation ---
function make_recommendation(grade::String)
    if grade in ["A", "B"]
        return "✅ Recommended: Low to medium risk loan."
    else
        return "❌ Not Recommended: High risk loan."
    end
end

# --- Step 6: Compare applicant with dataset ---
function compare_with_dataset(dti::Float64, data::DataFrame, purpose::String, monthly_term::Int)
    filtered = filter(row -> row.purpose == purpose && row.monthly_term == monthly_term, data)

    if nrow(filtered) == 0
        return missing
    else
        return mean(filtered.dti)
    end
end

# --- Main Program ---
function main()
    # Load dataset from CSV
    data = load_data("C:/Users/willi/Documents/MyProject/loan_data.csv")

    # Compute DTI column for dataset if missing
    if !(:dti in names(data))
        data.dti = (data.loan_dollar_amount ./ data.monthly_term) ./ (data.annual_income ./ 12)
    end

    # Get applicant input
    (annual_income, loan_amount, monthly_term, purpose) = get_user_input()
    dti = compute_dti(annual_income, loan_amount, monthly_term)

    # Grade and compare
    grade = grade_loan(dti; thresholds=(0.1, 0.2, 0.35))
    avg_dti = compare_with_dataset(dti, data, purpose, monthly_term)

    # Print results
    println("------------------------------------------------")
    println("Applicant Debt-to-Income Ratio: ", round(dti, digits=3))
    if avg_dti !== missing
        println("Average DTI for similar loans: ", round(avg_dti, digits=3))
    else
        println("No matching loans found in dataset for comparison.")
    end
    println("Assigned Grade: ", grade)
    println(make_recommendation(grade))
    println("------------------------------------------------")
end

main()
